import os
import typer
import subprocess
from foxie_cli.core.models import GeneratedCode


def unfence_code(code_string: str) -> str:
    """
    Strips the Markdown code fences (```python...```) from a string.
    """
    # Find the start of the Python code block
    start_fence = code_string.find("```python\n")
    if start_fence == -1:
        # If ```python is not found, try finding just ```
        start_fence = code_string.find("```\n")
        if start_fence == -1:
            return code_string # No fence found, return original string

    # Adjust start position to be after the fence
    start_pos = start_fence + code_string[start_fence:].find('\n') + 1

    # Find the end fence
    end_fence = code_string.rfind("```")
    if end_fence == -1:
        return code_string # No end fence found, return original string

    # Return the content between the fences
    return code_string[start_pos:end_fence].strip()

def format_python_file(file_path : str):
    """
    Formats a Python file using Black.
    """
    try:
        subprocess.run(['black', '--quiet', file_path], check=True)
        typer.secho(f"  üé® Formatted: {file_path}", fg=typer.colors.CYAN)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        typer.secho(f"  ‚ùå Error formatting file {file_path}: {e}", fg=typer.colors.RED)
        return False

def write_files(generated_code: GeneratedCode, base_dir: str ):
    """
    Writes the generated code files to the specified base directory.

    Iterates through the CodeFile objects, ensures directories exist,
    and writes the content to each file.
    """
    typer.secho("\nüìù Writing generated files to disk...", fg=typer.colors.BLUE)

    if not generated_code.files:
        typer.secho("Warning: No files were generated by the AI.", fg=typer.colors.YELLOW)
        return

    for code_file in generated_code.files:
        # Construct the full path (e.g., ./app/models/product.py)
        file_path = os.path.join(base_dir, code_file.file_path)
        
        # Get the directory part (e.g., ./app/models)
        directory = os.path.dirname(file_path)

        try:
            # Create the directory if it doesn't exist
            if directory:
                os.makedirs(directory, exist_ok=True)
            
            clean_content = unfence_code(code_file.content)

            # Write the file content
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(clean_content)
            
            typer.secho(f"  ‚úÖ Created: {file_path}", fg=typer.colors.GREEN)
            
            if file_path.endswith('.py'):
                formatted = format_python_file(file_path)
                if formatted:
                    typer.secho(f"  ‚úÖ Formatted: {file_path}", fg=typer.colors.BRIGHT_BLACK)

        except OSError as e:
            typer.secho(f"  ‚ùå Error creating file {file_path}: {e}", fg=typer.colors.RED)
            raise typer.Exit(code=1)