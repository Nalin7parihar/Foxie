# --- START: main.py.example ---
# This is the "golden standard" for a scalable FastAPI application entry point.

from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# Assumes the AI will create these files based on other instructions
from app.api.router import api_router
from app.core.config import settings
# A generic logger is good practice
# from app.core.logger import logger 

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Manage application lifespan events.
    This is the recommended way to handle startup and shutdown logic.
    """
    # --- Startup ---
    # logger.info(f"Starting up {settings.PROJECT_NAME}...")
    # Add any async service initializations here (e.g., database connection pool)
    print(f"Starting up {settings.PROJECT_NAME}...")
    
    yield
    
    # --- Shutdown ---
    # logger.info(f"Shutting down {settings.PROJECT_NAME}...")
    # Add any async service cleanup here
    print(f"Shutting down {settings.PROJECT_NAME}...")


def create_app() -> FastAPI:
    """
    Creates and configures the FastAPI application instance.
    """
    app = FastAPI(
        title=settings.PROJECT_NAME,
        description="A FastAPI application generated by Foxie AI.",
        version="0.1.0",
        openapi_url="/api/v1/openapi.json",
        docs_url="/docs",
        redoc_url="/redoc",
        lifespan=lifespan
    )

    # Set all CORS enabled origins
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # In production, restrict this to your frontend's domain
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # Include the main API router
    app.include_router(api_router, prefix="/api/v1")
    
    @app.get("/", tags=["Root"])
    def read_root():
        """
        Root endpoint providing basic API information.
        """
        return {"message": f"Welcome to {settings.PROJECT_NAME}"}

    @app.get("/health", tags=["Health"])
    def health_check():
        """
        Simple health check endpoint.
        """
        return {"status": "ok"}

    return app

# Create the app instance for the ASGI server (like uvicorn) to find
app = create_app()
# --- END: main.py.example ---