import typer
import requests
from typing_extensions import Annotated
import os
from rich.console import Console

# Assuming your file writer utility is here
from .utils.file_writer import write_files
# Assuming your Pydantic models for the response are here
from .core.models import GeneratedCode, CodeFile

# --- Configuration ---
# Define the URL of your backend service. Default is localhost.
BACKEND_URL = os.getenv("FOXIE_BACKEND_URL", "http://127.0.0.1:8000")

console = Console()
app = typer.Typer(
    name="foxie",
    help="ü¶ä A smart AI-powered code scaffolding CLI (Client)"
)

scaffold_app = typer.Typer(
    name="scaffold",
    help="Scaffold new features and code structures using AI."
)
app.add_typer(scaffold_app)

@scaffold_app.command(
    "fastapi-crud",
    help="Scaffolds a full CRUD feature via the backend AI service."
)
def scaffold_fastapi_crud(
    project_name: Annotated[str, typer.Option(
        "--project-name", "-p",
        help="The name for the new project folder.",
        prompt="Enter the project name" # Added prompt for convenience
    )],
    resource: Annotated[str, typer.Option(
        "--resource", "-r",
        help="The name of the resource, e.g., 'product', 'user'."
    )],
    fields: Annotated[str, typer.Option(
        "--fields", "-f",
        help='A comma-separated string of fields and types, e.g., "name:str, price:float".'
    )]
):
    """
    Sends a request to the Foxie backend to generate code.
    """
    typer.secho(f"‚ú® Requesting scaffold for resource '{resource}' in project '{project_name}' ‚ú®", fg=typer.colors.CYAN, bold=True)

    # --- Prepare API Request ---
    request_data = {
        "project_name": project_name,
        "resource": resource,
        "fields_str": fields
    }
    
    scaffold_endpoint = f"{BACKEND_URL}/scaffold"
    
    typer.echo(f" Contacting backend service at {scaffold_endpoint}...")

    # --- Call Backend API ---
    generated_code: GeneratedCode = None
    try:
        
        # Use a spinner while waiting for the backend
        with console.status("[bold green]ü§ñ Requesting AI generation...", spinner="dots") as status:
            response = requests.post(scaffold_endpoint, json=request_data, timeout=180) # 3 minute timeout
            response.raise_for_status() # Check for HTTP errors
            generated_code_data = response.json()
            generated_code = GeneratedCode(**generated_code_data) # Validate response
            status.stop()
            
        typer.secho("‚úÖ Received generated code from backend!", fg=typer.colors.GREEN)

    except requests.exceptions.ConnectionError:
        typer.secho(f"\n‚ùå Error: Could not connect to backend at {BACKEND_URL}.", fg=typer.colors.RED)
        typer.secho("    Please ensure the backend server (`foxie-backend`) is running.", fg=typer.colors.YELLOW)
        raise typer.Exit(code=1)
    except requests.exceptions.Timeout:
        typer.secho(f"\n‚ùå Error: Request to backend timed out.", fg=typer.colors.RED)
        typer.secho("    The AI generation might be taking too long.", fg=typer.colors.YELLOW)
        raise typer.Exit(code=1)
    except requests.exceptions.HTTPError as e:
        error_detail = e.response.text # Get error detail from backend if available
        typer.secho(f"\n‚ùå Backend Error ({e.response.status_code}): {error_detail}", fg=typer.colors.RED)
        raise typer.Exit(code=1)
    except Exception as e: # Catch Pydantic validation errors or other issues
        typer.secho(f"\n‚ùå Error processing backend response: {e}", fg=typer.colors.RED)
        raise typer.Exit(code=1)
    
    if generated_code is None:
        typer.secho("\n‚ùå Error: No code was generated by the backend.", fg=typer.colors.RED)
        raise typer.Exit(code=1)

    # --- Write Files ---
    try:
        write_files(generated_code, base_dir=project_name)
        
        typer.secho(f"\nüéâ Successfully scaffolded project '{project_name}'!", fg=typer.colors.BRIGHT_GREEN, bold=True)
        
# --- Setup Instructions ---
        typer.secho("\nNext steps:", fg=typer.colors.CYAN, bold=True)

        # Define the pyproject.toml content separately
        pyproject_content = f'''
[project]
name = "{project_name}"
version = "0.1.0"
requires-python = ">=3.9"
dependencies = [
    "fastapi",
    "uvicorn[standard]",
    "sqlalchemy",
    "pydantic",
    "pydantic-settings",
    "python-jose[cryptography]",
    "passlib[bcrypt]",
]

[tool.setuptools]
packages = ["app"]
'''
        # --- FIX: Define Windows path outside f-string expression ---
        windows_activate_cmd = "uv venv ; .\\.venv\\Scripts\\activate"

        # Now build the main instructions string
        instructions = f"""
    1.  Navigate into your new project:
        {typer.style(f"cd {project_name}", bold=True)}

    2.  Create a 'pyproject.toml' file and paste the following content:
        {typer.style(pyproject_content, bold=True)}

    3.  Create and activate a virtual environment:
        {typer.style("uv venv && source .venv/bin/activate", bold=True)} (Linux/macOS)
        {typer.style(windows_activate_cmd, bold=True)} (Windows)

    4.  Install the dependencies:
        {typer.style("uv pip install -e .", bold=True)}

    5.  Run your new FastAPI application:
        {typer.style("uvicorn app.main:app --reload", bold=True)}
        """
        typer.echo(instructions)

    except Exception as e:
        typer.secho(f"\n‚ùå An error occurred while writing files or printing instructions: {e}", fg=typer.colors.RED)
        raise typer.Exit(code=1)


if __name__ == "__main__":
    app()