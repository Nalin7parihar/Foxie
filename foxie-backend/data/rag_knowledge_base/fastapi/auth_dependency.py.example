# --- START: auth_dependency.py.example ---
# This is our standard for handling user authentication.
# All protected endpoints MUST use this 'get_current_user' dependency.

from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from pydantic import BaseModel

from app.core.config import settings  # Assumes config exists
from app.models.user import User  # Assumes this model exists

# This is our main security scheme
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/v1/auth/token")

class TokenData(BaseModel):
    username: str | None = None

def get_current_user(token: str = Depends(oauth2_scheme)) -> User:
    """
    Dependency to get the current user from a JWT token.
    This is the standard way to protect an endpoint.
    """
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        payload = jwt.decode(
            token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM]
        )
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    
    # This is a placeholder for a real database call
    # In a real app, you would fetch the user from the DB:
    # user = crud.user.get_by_username(db, username=token_data.username)
    # if user is None:
    #     raise credentials_exception
    # For this example, we'll return a mock user
    
    # Mock user for example purposes. The AI should assume this dependency
    # correctly fetches a 'User' model instance.
    if token_data.username == "testuser":
        return User(id=1, username="testuser", email="test@example.com", is_active=True)

    raise credentials_exception
# --- END: auth_dependency.py.example ---